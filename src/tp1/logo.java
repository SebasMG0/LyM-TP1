/* logo.java */
/* Generated By:JavaCC: Do not edit this line. logo.java */
package tp1;
import java.util.*;

public class logo implements logoConstants {
  private static HashMap <String, HashSet< String>> methodVars = new HashMap<>();
  private static List < String > vars= new ArrayList<>();

  static void defineVar(String varName) {
                vars.add(varName);
    }

  static boolean isVarDefined(String varName) {
    return vars.contains(varName);
  }

  static void defineMethod(String methodName) {
                methodVars.put(methodName, new HashSet <String >());
    }

  static boolean isMethodDefined(String methodName) {
    return methodVars.containsKey(methodName);
  }

  static void addMethodVar(String methodName, String varName) {
    methodVars.get(methodName).add(varName);
  }

  static HashSet getMethodVars(String methodName) {
    return methodVars.get(methodName);
  }

  static void restoreVars(int i) {
    for (int k=vars.size()-1; k > i; k--) {
      vars.remove(k);
    }
  }


  public static void main(String args []) throws ParseException
  {
    logo parser = new logo(System.in);
        System.out.println("************** Reading from standard input **************");
        System.out.println(" Enter '!' to finish");
        System.out.println(" Enter a logo expression: ");
    while (true)
    {
      try
      {
        switch (logo.one_line())
        {
          case 0 :
          System.out.println("OK.");
          break;
          case 1 :
          System.out.println("Type '!' if you want to finish");
          break;
          case 2:
          System.out.println("Finished by user");
          System.exit(1);
          default :
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        logo.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

  static final public void varDef() throws ParseException {Token t;
    jj_consume_token(MAKE);
    jj_consume_token(QUO);
    t = jj_consume_token(NAME);
defineVar(t.image.toLowerCase());
    jj_consume_token(NUM);
}

  static final public void methodCall() throws ParseException {Token t;
  int i;
    t = jj_consume_token(NAME);
if (!isMethodDefined(t.image.toLowerCase())) {
       {if (true) throw new ParseException("Method '" + t.image.toLowerCase() + "' is not defined.");}
       }
    i= getMethodVars(t.image.toLowerCase()).size();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUM:
      case COL:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COL:{
        checkVar();
        break;
        }
      case NUM:{
        jj_consume_token(NUM);
i--;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
if (i<0) {
       {if (true) throw new ParseException("Too many arguments for the method '"+t.image+"'");}
       }
     if (i >0) {
       {if (true) throw new ParseException("Missing arguments in the method '"+t.image+"'");}
     }
}

  static final public void methodDef() throws ParseException {Token t;
 Token var;
 int i;
    jj_consume_token(TO);
    t = jj_consume_token(NAME);
defineMethod(t.image.toLowerCase());
    i= vars.size()-1;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COL:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(COL);
      var = jj_consume_token(NAME);
addMethodVar(t.image.toLowerCase(), var.image.toLowerCase());
          defineVar(var.image.toLowerCase());
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ARC:
      case REP:
      case UNITARY_COMMAND:
      case EMPTY_COMMAND:
      case NAME:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ARC:
      case UNITARY_COMMAND:
      case EMPTY_COMMAND:
      case NAME:{
        checkCommand();
        break;
        }
      case REP:{
        checkLoop();
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
if (vars.size()-1 >i) {
      restoreVars(i);
    }
    jj_consume_token(END);
}

  static final public void checkVar() throws ParseException {Token t;
    jj_consume_token(COL);
    t = jj_consume_token(NAME);
if (!isVarDefined(t.image.toLowerCase())) {
             {if (true) throw new ParseException("Var '"+ t.image +"' not defined!");}
           }
}

  static final public void checkParam() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COL:{
      checkVar();
      break;
      }
    case NUM:{
      jj_consume_token(NUM);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void checkCommand() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case UNITARY_COMMAND:{
      jj_consume_token(UNITARY_COMMAND);
      checkParam();
      break;
      }
    case EMPTY_COMMAND:{
      jj_consume_token(EMPTY_COMMAND);
      break;
      }
    case NAME:{
      methodCall();
      break;
      }
    case ARC:{
      jj_consume_token(ARC);
      checkParam();
      checkParam();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void checkLoop() throws ParseException {
    jj_consume_token(REP);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUM:{
      jj_consume_token(NUM);
      break;
      }
    case COL:{
      checkVar();
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LSB);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ARC:
      case REP:
      case UNITARY_COMMAND:
      case EMPTY_COMMAND:
      case NAME:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ARC:
      case UNITARY_COMMAND:
      case EMPTY_COMMAND:
      case NAME:{
        checkCommand();
        break;
        }
      case REP:{
        checkLoop();
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RSB);
}

  static final public int one_line() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ARC:
    case REP:
    case UNITARY_COMMAND:
    case EMPTY_COMMAND:
    case TO:
    case MAKE:
    case NAME:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAKE:{
        varDef();
        break;
        }
      case TO:{
        methodDef();
        break;
        }
      case ARC:
      case UNITARY_COMMAND:
      case EMPTY_COMMAND:
      case NAME:{
        checkCommand();
        break;
        }
      case REP:{
        checkLoop();
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return 0;}
      break;
      }
    case 31:{
      jj_consume_token(31);
{if ("" != null) return 1;}
      break;
      }
    case 32:{
      jj_consume_token(32);
{if ("" != null) return 2;}
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public logoTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xa00000,0xa00000,0x800000,0x40e800,0x40e800,0xa00000,0x40c800,0xa00000,0x40e800,0x40e800,0x45e800,0x8045e800,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,};
	}

  /** Constructor with InputStream. */
  public logo(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public logo(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new logoTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public logo(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new logoTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new logoTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public logo(logoTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(logoTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[33];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 12; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 33; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
